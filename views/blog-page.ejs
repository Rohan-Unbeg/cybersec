<%- include('partials/header') %>

<style>
  :root {
    --primary-color: #4a90e2;
    --secondary-color: #50e3c2;
    --dark-color: #2c3e50;
    --light-color: #ecf0f1;
  }

  body {
    display: flex;
    flex-direction: column;
  }




  #blogPage {
    padding: 60px 0;
  }

  .blog-posts {
    border-right: 1px solid #ddd;
  }

  .categories {
    padding-left: 30px;
  }

  .category-list {
    list-style: none;
    padding: 0;
  }

  .category-list button {
    background: none;
    border: none;
    color: var(--primary-color);
    cursor: pointer;
    font-size: 1rem;
    padding: 0;
    text-align: left;
    transition: color 0.3s ease;
  }

  .category-list button:hover {
    color: var(--secondary-color);
  }

  .card {
    border: none;
    margin-bottom: 20px;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    width: 100%;
  }

  .card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
  }

  .active-category {
    font-weight: bold;
    text-decoration: underline;
  }

  #loading,
  #error-message {
    text-align: center;
    padding: 20px;
    font-size: 1.2rem;
  }

  .no-posts-message {
    text-align: center;
    padding: 20px;
    font-style: italic;
    color: #666;
  }

  .footer {
    margin-top: 7rem;
    background-color: #1a252f;
    color: var(--light-color);
  }

  .sponsor-logo {
    max-width: 150px;
    height: auto;
    filter: grayscale(100%);
    transition: filter 0.3s;
  }

  .sponsor-logo:hover {
    filter: grayscale(0%);
  }

  .navbar {
    transition: all 0.3s;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    background-color: rgba(255, 255, 255, 0.95);
  }

  .navbar-scrolled {
    background-color: rgba(255, 255, 255, 0.95);
  }

  .navbar-brand {
    color: var(--dark-color);
  }

  .navbar-brand h3 {
    margin: 0;
  }
  .navbar-brand:hover {
    color: var(--dark-color);
  }

  .nav-link {
    color: var(--dark-color);
  }

  .nav-link:hover {
    color: var(--primary-color);
  }
</style>

<nav class="navbar navbar-expand-lg navbar-light fixed-top">
  <div class="container">
    <a class="navbar-brand" href="/">
      <h3><strong>CyberSec</strong></h3>
    </a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
      <ul class="navbar-nav ms-auto">
        <li class="nav-item"><a class="nav-link" href="/">Home</a></li>
        <li class="nav-item"><a class="nav-link" href="/#about">About</a></li>
        <li class="nav-item"><a class="nav-link" href="/#events">Events</a></li>
        <li class="nav-item"><a class="nav-link" href="/#team">Team</a></li>
        <li class="nav-item"><a class="nav-link" href="/blog">Blog</a></li>
        <li class="nav-item"><a class="nav-link" href="/contact">Contact</a></li>
      </ul>
    </div>
  </div>
</nav>


<main>

  <section id="blogPage" class="container content" style="flex: 1;">
    <div class="row">
      <!-- Blog Posts Section -->
      <div class="col-lg-8 blog-posts">
        <h2 class="section-title">Latest Blog Posts</h2>
        <div id="loading">Loading blog posts...</div>
        <div id="error-message" style="display: none;"></div>
        <div id="medium-feed"></div>
        <div id="pagination" class="d-flex justify-content-between">
          <button id="prevBtn" class="btn btn-primary" disabled>Previous</button>
          <button id="nextBtn" class="btn btn-primary">Next</button>
        </div>
      </div>

      <!-- Categories Section -->
      <div class="col-lg-4 categories">
        <h2 class="section-title">Categories</h2>
        <ul class="category-list" id="category-list">
          <li><button data-category="All" class="active-category">All</button></li>
        </ul>
      </div>
    </div>
  </section>
</main>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    const mediumFeed = document.getElementById("medium-feed");
    const categoryList = document.getElementById("category-list");
    const loadingElement = document.getElementById("loading");
    const errorElement = document.getElementById("error-message");
    const prevBtn = document.getElementById("prevBtn");
    const nextBtn = document.getElementById("nextBtn");
    const spinnerOverlay = document.getElementById("spinner"); // Get the spinner overlay
    let allPosts = [];
    let filteredPosts = [];
    let currentPage = 1;
    const postsPerPage = 5; // Number of posts to show per page

    // Show/hide loading spinner
    function showLoading(show) {
      loadingElement.style.display = show ? "block" : "none";
    }

    // Show error message
    function showError(message) {
      errorElement.textContent = message;
      errorElement.style.display = "block";
    }

    // Hide error message
    function hideError() {
      errorElement.style.display = "none";
    }

    // Fetch data from multiple Medium feeds
    function fetchMediumFeeds() {
      showLoading(true);
      hideError();

      const feeds = [
        "https://api.rss2json.com/v1/api.json?rss_url=https://medium.com/feed/@Cyb3rsecurity",
        "https://api.rss2json.com/v1/api.json?rss_url=https://medium.com/feed/@cyber-security",
        "https://api.rss2json.com/v1/api.json?rss_url=https://sparshjazz.medium.com/",
        "https://api.rss2json.com/v1/api.json?rss_url=https://medium.com/@infosecwriteups"
      ];

      Promise.all(feeds.map(feed => fetch(feed).then(response => response.json())))
        .then(results => {
          let posts = [];

          results.forEach(data => {
            if (!data.items || data.items.length === 0) return;

            posts = posts.concat(data.items.map(post => ({
              title: post.title,
              link: post.link,
              pubDate: new Date(post.pubDate).toLocaleDateString(),
              category: post.categories.length > 0 ? post.categories[0] : "Uncategorized",
              truncatedDescription: post.description.replace(/<[^>]+>/g, '').substring(0, 100) + "..."
            })));
          });

          if (posts.length === 0) {
            mediumFeed.innerHTML = "<p class='no-posts-message'>No blog posts available.</p>";
            return;
          }

          allPosts = posts;
          filteredPosts = [...allPosts];
          populateCategories();
          renderBlogPosts(filteredPosts, currentPage);
        })
        .catch(error => {
          console.error("Error fetching Medium feeds:", error);
          showError("Failed to load blog posts. Please try again later.");
        })
        .finally(() => {
          showLoading(false);
        });
    }

    // Populate categories dynamically
    function populateCategories() {
      const uniqueCategories = [...new Set(allPosts.map(post => post.category))];
      uniqueCategories.forEach(category => {
        const li = document.createElement('li');
        li.innerHTML = `<button data-category="${category}">${category}</button>`;
        categoryList.appendChild(li);
      });
    }

    // Render blog posts with pagination
    function renderBlogPosts(posts, page) {
      const startIndex = (page - 1) * postsPerPage;
      const endIndex = page * postsPerPage;
      const postsToRender = posts.slice(startIndex, endIndex);

      if (postsToRender.length === 0) {
        mediumFeed.innerHTML = "<p class='no-posts-message'>No blog posts available.</p>";
        return;
      }

      mediumFeed.innerHTML = postsToRender.map(post => `
        <div class="card h-100 mb-4">
          <div class="card-body">
            <h5 class="card-title">${post.title}</h5>
            <p class="card-text">
              <small class="text-muted">${post.pubDate} - ${post.category}</small>
            </p>
            <p>${post.truncatedDescription}</p>
            <a href="${post.link}" class="btn btn-primary" target="_blank">Read More</a>
          </div>
        </div>
      `).join('');

      updatePaginationButtons(posts);
    }

    // Update the state of the pagination buttons
    function updatePaginationButtons(posts) {
      prevBtn.disabled = currentPage === 1;
      nextBtn.disabled = currentPage * postsPerPage >= posts.length;
    }

    // Handle pagination button clicks
    prevBtn.addEventListener('click', function() {
      if (currentPage > 1) {
        currentPage--;
        renderBlogPosts(filteredPosts, currentPage);
      }
    });

    nextBtn.addEventListener('click', function() {
      if (currentPage * postsPerPage < filteredPosts.length) {
        currentPage++;
        renderBlogPosts(filteredPosts, currentPage);
      }
    });

    // Handle category click events
    categoryList.addEventListener('click', (event) => {
      if (event.target.tagName === 'BUTTON') {
        const category = event.target.getAttribute('data-category');

        // Update active category styling
        document.querySelectorAll('.category-list button').forEach(btn => btn.classList.remove('active-category'));
        event.target.classList.add('active-category');

        // Filter posts by category
        filteredPosts = category === 'All' ? allPosts : allPosts.filter(post => post.category === category);
        currentPage = 1; // Reset to first page when category changes
        renderBlogPosts(filteredPosts, currentPage);
      }
    });

    // Fetch the Medium feeds
    fetchMediumFeeds();
  });
</script>

<%- include('partials/footer') %>